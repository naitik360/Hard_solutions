class Solution {
public:
    bool isValid(vector<vector<char>>& v,int r,int c,char val)
    {
        //row
        for(int i=0;i<v.size();i++)
        {
            if(v[i][c]==(val))
                 return false;
        }
        
        //column
        for(int j=0;j<v[0].size();j++)
        {
            if(v[r][j]==(val))
             return false;
        }
        
        //3*3 box checking
        int nc=3*(c/3);
        int nr=3*(r/3);
        
        for(int i=0;i<3;i++)
        {
            for(int j=0;j<3;j++)
            {
                if(v[nr+i][nc+j]==(val))
                     return false;
            }
        }
      return true;
    }
    void find(vector<vector<char>>& v,int i,int j,vector<vector<char>>& ans)
    {
        if(i==v.size())
        {
            ans=v;
            return ;
        }
        
        int ni=0,nj=0;
        if(j==v[0].size()-1)
        {
            nj=0;
            ni=i+1;
        }
        else
        {
            ni=i;
            nj=j+1;
        }
        
        if(v[i][j]=='.')
        {
              for(char t='1';t<='9';t++)
              {
                if(isValid(v,i,j,t))
                {
                  v[i][j]=(t);
                  find(v,ni,nj,ans);
                  v[i][j]='.';
                }
              }
        }
        else
        {
            find(v,ni,nj,ans);
        }
     
    }
    void solveSudoku(vector<vector<char>>& v) {
        vector<vector<char>> ans;
        
        find(v,0,0,ans);
        
        v=ans;
        
    }
};
